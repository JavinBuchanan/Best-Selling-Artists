if(!require(tidyverse)) install.packages("tidyverse") 
if(!require(kableExtra)) install.packages("kableExtra")
if(!require(tidyr)) install.packages("tidyr")
if(!require(tidyverse)) install.packages("tidyverse")
if(!require(stringr)) install.packages("stringr")
if(!require(ggplot2)) install.packages("ggplot2")
if(!require(dplyr)) install.packages("dplyr")
if(!require(caret)) install.packages("caret")
if(!require(e1071)) install.packages("e1071")
if(!require(class)) install.packages("class")
if(!require(ROCR)) install.packages("ROCR")
if(!require(randomForest)) install.packages("randomForest")
if(!require(PRROC)) install.packages("PRROC")
if(!require(reshape2)) install.packages("reshape2")
if(!require(funModeling)) install.packages("funModeling")
if(!require(corrplot)) install.packages("corrplot")
if(!require(dplyr)) install.packages("dplyr")
if(!require(gridExtra))install.packages("gridExtra")
if(!require(DescTools))install.packages("DescTools")
# Loading all needed libraries

library(dplyr)
library(tidyverse)
library(kableExtra)
library(tidyr)
library(ggplot2)
library(caret)
library(e1071)
library(class)
library(ROCR)
library(randomForest)
library(PRROC)
library(reshape2)
library(funModeling)
library(corrplot)
library(dplyr)
library(DescTools)

#code to access dataset
##loading the dataset from my github profile
 data<- read.csv("https://raw.githubusercontent.com/JavinBuchanan/Best-Selling-Artists/main/Raw%20DataSet%20for%20Best%20Selling%20Artists.csv")

 #Finding the amount of observations and variables in the datset
 dim(data)

 #Viewing the datatypes of the variables in the dataset
 str(data)

#Finding out if there any data with N/As
sapply(data, function(m){
  sum(is.na(m))
})

boxplot(data$TCU,
                  main = "Box and Whisker Plot showing Total Certified Units",
                  xlab = "Total Certified Units",
                  ylab = "",
                  col = "orange",
                  border = "brown",
                  horizontal = TRUE,
                  notch = TRUE
          )

#removing characters from TCU and sales column
data$TCU<-gsub("million","",as.character(data$TCU))
data$Sales<-gsub("million",".",as.character(data$Sales))
data$Sales<-gsub("\\..*","",as.character(data$Sales))
data$Genre<-gsub("\\/.*","",as.character(data$Genre))
data$Artist <- gsub("Ã©", "",as.character(data$Artist))

#removing multiple ranges for each cell in period_active
data[9, "period_active"] <- "1965-2014"
data[15, "period_active"] <- "1971-present"
data[29, "period_active"] <- "1980-present"
data[31, "period_active"] <- "1972-present"
data[32, "period_active"] <- "1935-1995"
data[45, "period_active"] <- "1963-2012"
data[77, "period_active"] <- "1967-present"
data[117, "period_active"] <- "1977-2008"

#changing present to 2022 to use integers only 
data$period_active<-gsub("present","2022",as.character(data$period_active))

library(dplyr)
data[,"Genre", drop = FALSE]

data <-
  data %>%
  mutate(Genre = as_factor(Genre))
data$`TCU` <- as.numeric(data$`TCU`)  # Convert End Year to numeric
str (data)

#removing multiple ranges for each cell in Genre
data[9, "Genre"] <- "Rock"
data[2, "Genre"] <- "Rock"
data[7, "Genre"] <- "Rock"
data[17, "Genre"] <- "Rock"
data[25, "Genre"] <- "Rock"
data[28, "Genre"] <- "Rock"
data[39, "Genre"] <- "Rock"
data[41, "Genre"] <- "Rock"
data[43, "Genre"] <- "Rock"
data[47, "Genre"] <- "Rock"
data[48, "Genre"] <- "Rock"
data[53, "Genre"] <- "Pop"
data[54, "Genre"] <- "Rock"
data[64, "Genre"] <- "Rock"
data[68, "Genre"] <- "Rock"
data[76, "Genre"] <- "Rock"
data[77, "Genre"] <- "Rock"
data[78, "Genre"] <- "Rock"
data[92, "Genre"] <- "Rock"
data[96, "Genre"] <- "Pop"
data[99, "Genre"] <- "Rock"
data[104, "Genre"] <- "Rock"
data[110, "Genre"] <- "Rock"
data[113, "Genre"] <- "Rock"
data[118, "Genre"] <- "Rock"
data[120, "Genre"] <- "Rock"

# load dplyr and tidyr library
library(tidyr)

# Split name column into start year and end year
data <- data %>% separate(period_active, c('Start Year', 'End Year'))  #Separation of period active column


data$`Start Year` <- as.numeric(data$`Start Year`)  # Convert Start Year to numeric
data$`End Year` <- as.numeric(data$`End Year`)  # Convert End Year to numeric

data$'Years Active' <- (data$'End Year' - data$'Start Year')

#changing position of column 'Years Active'
data <- data %>% relocate('Years Active', .before = Year)  


#changing column 'Year' to 'Year of First Chart Entry'
colnames(data)[6] <- "Year of First Chart Entry" 

# Central Tendicies
datamean<- mean(data$TCU)

datamedian<-median(data$TCU)

# Define the Mode function
Mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}

# Find the mode of the column
datamode <- Mode(data$TCU)

#PROBLEM STATEMENT 1

usfilter<- filter(data, Country=='United States')
view(usfilter)
bothfilters<- filter(usfilter, TCU>160)
view(bothfilters)
threefilters<-filter(bothfilters, bothfilters$`Years Active`<15)
view(threefilters)

countdata <- nrow(data)
 print (countdata)
 
 countus <-nrow(usfilter)
print (countus)


countbothfilters<-nrow(bothfilters)
 print (countbothfilters)

countthreefilters<-nrow(threefilters)
 print (countthreefilters)

 print("A intersect B is")
aintersectb <-countbothfilters/countdata
 print (aintersectb)

bothfilters<-filter(usfilter, TCU>160)
 threefilters<-filter(bothfilters, bothfilters$`Years Active`<15)
 countthreefilters<-nrow(threefilters)
 print (countthreefilters)

 print("A intersect B is")

countbothfilters/countdata

aintersectb <-countbothfilters/countdata

print(aintersectb)

probabilityus<- countus/countdata 

print (probabilityus)

 bgivena <- aintersectb/probabilityus
 print (bgivena)
 
 print(countthreefilters)
[1] 1
 probabilitycgivenaandb <- countthreefilters/bgivena
 print (probabilitycgivenaandb)
[1] 5.642857
 probabilitycandaandb <- countthreefilters/countus
 print(probabilitycandaandb)
[1] 0.01265823
 probabilitycgivenaandb<- probabilitycandaandb/bgivena
 print(probabilitycgivenaandb)
[1] 0.07142857
 answerforprob1= probabilitycgivenaandb*bigvena

answerforprob1= probabilitycgivenaandb*bgivena
 print(answerforprob1)
 


#PROBLEM STATEMENT 2

rand_sample<- data[sample(nrow(data), 50), ]
View(rand_sample)

# Normal Distribution for Pop
pop_filter<- filter(rand_sample, rand_sample$Genre =='Pop' | rand_sample$Genre =='Pop ')
View(pop_filter)

pop_mean<-mean(pop_filter$TCU)
print(pop_mean)

pop_median<-median(pop_filter$TCU)
print(pop_median)

pop_standev<- sd(pop_filter$TCU)
print(pop_standev)

x_value<-160
pop_z<- (x_value - pop_mean)/pop_standev
print(z)

pop_prob <- pnorm(pop_z, mean = 0, sd = 1, lower.tail = FALSE)
print(pop_prob)

pop_count<-nrow(pop_filter)
print(pop_count)
 
pop_estim<-(pop_prob * pop_count)
print(pop_estim)

y <- pop_filter$TCU

# X-axis grid
x3 <- seq(min(y), max(y), length = 40)

# Normal curve
fun1 <- dnorm(x3, mean = mean(y), sd = sd(y))

# Histogram
hist(y, prob = TRUE, col = "white",
     ylim = c(0, max(fun1)),
     main = "Histogram with normal curve")
lines(x3, fun1, col = 2, lwd = 2)


# Normal Distribution for Rock

rock_filter<- filter(rand_sample, rand_sample$Genre =='Rock' | rand_sample$Genre =='Rock ')
View(rock_filter)

rock_mean<-mean(rock_filter$TCU)
print(rock_mean)

rock_median<-median(rock_filter$TCU)
print(rock_median)

rock_standev<- sd(rock_filter$TCU)
print(rock_standev)

x_value<-160
rock_z<- (x_value - rock_mean)/rock_standev
print(z)

rock_prob <- pnorm(rock_z, mean = 0, sd = 1, lower.tail = FALSE)
print(rock_prob)

rock_count<-nrow(rock_filter)
print(rock_count)
 
rock_estim<-(rock_prob * rock_count)
print(rock_estim)

w <- pop_and_rock_filter$TCU

# X-axis grid
x4 <- seq(min(w), max(w), length = 40)

# Normal curve
fun1 <- dnorm(x4, mean = mean(w), sd = sd(w))

# Histogram
hist(w, prob = TRUE, col = "white",
     ylim = c(0, max(fun1)),
     main = "Histogram with normal curve")
lines(x4, fun1, col = 2, lwd = 2)



# Normal Distribution Curve for both Pop and Rock vs TCU

pop_and_rock_filter<-filter(rand_sample, rand_sample$Genre =='Pop' | rand_sample$Genre =='Pop ' | rand_sample$Genre =='Rock' | rand_sample$Genre =='Rock ')
view(pop_and_rock_filter)

x <- pop_and_rock_filter$TCU

# X-axis grid
x2 <- seq(min(x), max(x), length = 40)

# Normal curve
fun <- dnorm(x2, mean = mean(x), sd = sd(x))

# Histogram
hist(x, prob = TRUE, col = "white",
     ylim = c(0, max(fun)),
     main = "Histogram with normal curve")
lines(x2, fun, col = 2, lwd = 2)
